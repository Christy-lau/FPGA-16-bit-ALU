module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  input_storer inputstorer; // for storing inputs
  alu alu16; // takes in inputs and alufn and gives output and zvn
  counter slowclock(#SIZE(1),#DIV(26), .clk(clk), .rst(rst));
  auto_tester autotester(.clk(slowclock.value), .rst(io_button[0])); //auto_tester autotester;

  
  .clk(clk) {
    // The reset conditi  oner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    autotester.switch = 0; // instantiate switch from autotester with 0 first
    
    inputstorer.clk = clk; // instantiate clk from inputstorer with 0 first
    inputstorer.value = 0; // instantiate value from inputstorer with 0 first
    inputstorer.rst = io_button[2]; // instantiate rst from inputstorer with 0 first
    inputstorer.button_a = 0; // instantiate button_a from inputstorer with 0 first
    inputstorer.button_b = 0; // instantiate button_b from inputstorer with 0 first
    alu16.a = 0; // instantiate a from alu16 with 0 first
    alu16.b = 0; // instantiate b from alu16 with 0 first
    alu16.alufn = 0; // instantiate alufn from alu16 with 0 first

    // Error simulation
    alu16.sim_error = io_dip[0][6];
    autotester.sim_error = io_dip[0][6];
    
    
    // autotester
    if(io_dip[0][7] == 1) {
      autotester.switch = io_dip[0][7];
      if (autotester.result == b01) {
        // if both leds flicker off and on that means cases in autotester PASS
        io_led[0][7] = 1; // io_led[0][7] will light up upon result from autotester = b01
        io_led[0][6] = 1; // io_led[0][6] will light up upon result from autotester = b01
      }
      else if (autotester.result == b10) {
        io_led[0][6] = 1; // io_led[0][6] will light up upon FAIL
      }
      else {
        io_led[0][7:6] = 2b0; // default state
      }
      
    }
    // manueltester
    else {
      // required i/o for input_storer
      inputstorer.clk = clk;
      inputstorer.button_a = io_button[3]; // left button stores input A 
      inputstorer.button_b = io_button[4]; // right button stores input B 
      inputstorer.value[7:0] = io_dip[1]; // first half of input
      inputstorer.value[15:8] = io_dip[2]; // second half of input
      inputstorer.rst = io_button[2]; // down button to reset (manually)
      
      // required i/o for alu
      alu16.alufn = io_dip[0][5:0]; // signals given in first 6 switches from right
      alu16.a = inputstorer.outA; // get input A from dff storeA
      alu16.b = inputstorer.outB; // get input B from dff storeB
      io_led[1] = alu16.out[7:0]; // display 16 bit output using io_led[1] and [2]
      io_led[2] = alu16.out[15:8];
      io_led[0][2] = alu16.z;
      io_led[0][1] = alu16.v;
      io_led[0][0] = alu16.n;
      // Note that z is lit at start.
    }
}