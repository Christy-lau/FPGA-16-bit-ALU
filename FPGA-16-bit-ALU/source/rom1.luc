module rom1 ( //feed into fsm
    input selector[5],   
    output out[38]        //output 38 bits (A+B+ALUFN)
  ) {
  
  const INPUTS = {b10000000000000000000000000001000001001,  //29 - Divider
                  b11111111111111100000000000000010001000,  //28 - Multiplier (negative A)
                  b00000000010101110000000000000010001000,  //27 - Multiplier 
                  b00000000000111000000000000001011100010,  //26 - Shifter (Arithmetic Left Shift)
                  b10000000000001000000000000001010100011,  //25 - Shifter (Arithmetic Right Shift)
                  b00001111000001000000000000001000100001,  //24 - Shifter (Shift right)
                  b00000000000011110000000000000100100000,  //23 - Shifter (Shift left)
                  b00110011110001000000000000111011011010,  //22 - A
                  b01110010010001101000011110000001011001,  //21 - B
                  b01001110100010110110010010101001010111,  //20 - NAND
                  b00001010000000000000100100000000010001,  //19 - NOR
                  b01010001100001000100100110111000010110,  //18 - XOR
                  b00010100100001000000000000111001011110,  //17 - OR
                  b00000100000001100000010000111011011000,  //16 - AND
                  b00000000001001000000000000011011110111,  //15 - Comparator (Less than equals, false)
                  b00000000000000000000000000000000110111,  //14 - Comparator (Less than equals, true + equal)
                  b00000000000000000000000000000001110111,  //13 - Comparator (Less than equals, true)
                  b00000000000000010000000000000000110101,  //12 - Comparator (Less than, false)
                  b00000000000000000000000000000001110101,  //11 - Comparator (Less than, true)
                  b01000000000101011000000000000000110011,  //10 - Comparator (equal, false)
                  b00000000001110110000000000111011110011,  //9 - Comparator (equal, true)
                  b00000000000000010000000000000001000001,  //8 - Subtraction(Zero)
                  b10000000000000000111111111111111000001,  //7 - Subtraction(negative overflow)
                  b01111111111111111111111111111111000001,  //6 - Subtraction (positive overflow)
                  b00000000001110110000000000100100000001,  //5 - Subtraction(no overflow)
                  b00000000000000000000000000000000000000,  //4 - Addition(Zero)
                  b10000100010010011100011100000011000000,  //3 - Addition(Negative overflow)
                  b01100000000000010010011111001011000000,  //2 - Addition(Positive overflow)
                  b00000000000101010000000111111011000000   //1 - Addition(No overflow)
  };

  always {
    out = INPUTS[selector];
  }
}