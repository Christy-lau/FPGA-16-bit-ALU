/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module adder_16_8 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    input [0:0] sim_error,
    output reg [15:0] out,
    output reg [0:0] z,
    output reg [0:0] v,
    output reg [0:0] n
  );
  
  
  
  reg [15:0] s;
  
  reg [0:0] alufn0;
  
  reg [31:0] extended_a;
  
  reg [31:0] extended_b;
  
  reg [31:0] muldiv_extended;
  
  always @* begin
    s = 16'h0000;
    alufn0 = alufn[0+0-:1];
    extended_a = 32'h00000000;
    extended_b = 32'h00000000;
    muldiv_extended = 32'h00000000;
    
    case (alufn[3+0-:1])
      1'h0: begin
        
        case (alufn[0+0-:1])
          1'h0: begin
            s = a + b;
          end
          1'h1: begin
            s = a - b;
          end
          default: begin
            s = 16'h0000;
          end
        endcase
      end
      1'h1: begin
        extended_a[0+15-:16] = a;
        extended_b[0+15-:16] = b;
        
        case (alufn[0+0-:1])
          1'h0: begin
            muldiv_extended = extended_a * extended_b;
            s = muldiv_extended[0+15-:16];
          end
          1'h1: begin
            muldiv_extended = extended_a / extended_b;
            s = muldiv_extended[0+15-:16];
          end
          default: begin
            s = 16'h0000;
          end
        endcase
      end
      default: begin
        s = 16'h0000;
      end
    endcase
    z = ~(|s);
    v = (a[15+0-:1] & (b[15+0-:1] ^ alufn0) & ~s[15+0-:1]) | (~a[15+0-:1] & ~(b[15+0-:1] ^ alufn0) & s[15+0-:1]);
    n = s[15+0-:1];
    if (sim_error == 1'h0) begin
      out = s;
    end else begin
      s[0+0-:1] = !s[0+0-:1];
      out = s;
    end
  end
endmodule
